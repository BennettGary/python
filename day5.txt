day5
# 第二章 获取文本语料和词汇资源
# 2.1获取文本语料库

1.古腾堡语料库
  NLTK包含古腾堡项目（Project Gutenberg）
  下面是这个语料库中文件标识符
    >>> import nltk
    >>> nltk.corpus.gutenberg.fileids()
    ['austen-emma.txt', 'austen-persuasion.txt', 'austen-sense.txt', 'bible-kjv.txt', 'blake-poems.txt',
    'bryant-stories.txt', 'burgess-busterbrown.txt', 'carroll-alice.txt', 'chesterton-ball.txt', 
    'chesterton-brown.txt','chesterton-thursday.txt', 'edgeworth-parents.txt', 'melville-moby_dick.txt', 
    'milton-paradise.txt', 'shakespeare-caesar.txt', 'shakespeare-hamlet.txt', 'shakespeare-macbeth.txt', 
    'whitman-leaves.txt']
  其中包含有很多的文本，我们选择其中一个进行操作。
    >>> emma = nltk.corpus.gutenberg.words('austen-emma.txt')
    >>> len(emma)
    192427
  我们还可以使用之前学习的一些文本操作方法来对导入的语料库进行操作
  例如：
    >>> emma = nltk.Text(nltk.corpus.gutenberg.words('austen-emma.txt'))
    >>> emma.concordance('surprize')
	Displaying 25 of 37 matches:
	er father , was sometimes taken by surprize at his being still able to pity...
  我们在定义emma时，我们调用了NLTK中的corpus包中的gutenberg对象的words()函数。
  
  但因为我们总是要输入这么长的名字很繁琐，Python提供了另一个版本的import语句，示例如下：
    >>> from nltk.corpus import gutenberg
    >>> gutenberg.fileids()
    ['austen-emma.txt', 'austen-persuasion.txt', 'austen-sense.txt',...]
    >>> emma = gutenberg.words('austen-emma.txt')
  导入语料库之后，让我们写一个简单的程序，通过循环遍历前面列出的gutenberg文件标识符链表相应的fileid，然后计算统计每个文本。
    >>>  for fileid in gutenberg.fileids():
         	num_chars = len(gutenberg.raw(fileid))
         	num_words = len(gutenberg.words(fileid))
         	num_sents = len(gutenberg.sents(fileid))
	 	num_vocab = len(set([word.lower() for word in gutenberg.words(fileid)]))
	 	print(num_chars,num_words,num_sents,num_vocab,fileid)
   
    887071 192427 7752 7344 austen-emma.txt
    466292 98171 3747 5835 austen-persuasion.txt
    673022 141576 4999 6403 austen-sense.txt
    4332554 1010654 30103 12767 bible-kjv.txt
    38153 8354 438 1535 blake-poems.txt
    249439 55563 2863 3940 bryant-stories.txt
    84663 18963 1054 1559 burgess-busterbrown.txt
    144395 34110 1703 2636 carroll-alice.txt
    457450 96996 4779 8335 chesterton-ball.txt
    406629 86063 3806 7794 chesterton-brown.txt
    320525 69213 3742 6349 chesterton-thursday.txt
    935158 210663 10230 8447 edgeworth-parents.txt
    1242990 260819 10059 17231 melville-moby_dick.txt
    468220 96825 1851 9021 milton-paradise.txt
    112310 25833 2163 3032 shakespeare-caesar.txt
    162881 37360 3106 4716 shakespeare-hamlet.txt
    100351 23140 1907 3464 shakespeare-macbeth.txt
    711215 154883 4250 12452 whitman-leaves.txt

    raw()函数给我们没有进行过任何语言学处理的文件的内容。因此，例如：len(gutenberg.raw('blake-poems.txt')告诉我们文本中出现的词汇个数，包括词之间的
空格。sents()函数把文本划分为句子，其中每个句子是一个词链表。
      >>> macbeth_sentences = gutenberg.sents('shakespeare-macbeth.txt')
      >>> macbeth_sentences
      [['[', 'The', 'Tragedie', 'of', 'Macbeth', 'by', 'William', 'Shakespeare', '1603', ']'], ['Actus', 'Primus', '.'], ...]
      >>> macbeth_sentences[1037]
      ['Good', 'night', ',', 'and', 'better', 'health', 'Attend', 'his', 'Maiesty']
      >>> longest_len = max([len(s) for s in macbeth_sentences])
      >>> [s for s in macbeth_sentences if len(s) == longest_len]
      [['Doubtfull', 'it', 'stood', ',', 'As', 'two', 'spent', 'Swimmers', ',', 'that', 'doe', 'cling', 'together', ',', 'And', 'choake', 'their', 'Art', ':', 'The', 'mercilesse...]]

2.网络和聊天文本
    虽然gutenberg项目中包含成千上万的书籍，它代表既定的文学。考虑到较不正式的语言也是很重要的。
    所以我们导入NLTK的网络文本小集合
      >>> from nltk.corpus import webtext
      >>> for fileid in webtext.fileids():
          	print(fileid)
      firefox.txt
      grail.txt
      overheard.txt
      pirates.txt
      singles.txt
      wine.txt
    还有一个即时聊天会话语料库
    >>> from nltk.corpus import nps_chat
    >>> chatroom = nps_chat.posts('10-19-20s_706posts.xml')
    >>> chatroom[123]
    ['i', 'do', "n't", 'want', 'hot', 'pics', 'of', 'a', 'female', ',', 'I', 'can', 'look', 'in', 'a', 'mirror', '.']

